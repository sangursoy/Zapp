{
  "content": "import { useState, useCallback } from 'react';\n\ninterface AsyncState<T> {\n  data: T | null;\n  loading: boolean;\n  error: Error | null;\n}\n\nexport function useAsync<T>() {\n  const [state, setState] = useState<AsyncState<T>>({\n    data: null,\n    loading: false,\n    error: null,\n  });\n\n  const run = useCallback(async (promise: Promise<T>) => {\n    setState(prev => ({ ...prev, loading: true, error: null }));\n    try {\n      const data = await promise;\n      setState({ data, loading: false, error: null });\n      return data;\n    } catch (error) {\n      setState({ data: null, loading: false, error: error as Error });\n      throw error;\n    }\n  }, []);\n\n  const reset = useCallback(() => {\n    setState({ data: null, loading: false, error: null });\n  }, []);\n\n  return { ...state, run, reset };\n}\n\nexport default useAsync;"
}